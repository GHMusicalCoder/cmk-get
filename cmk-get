#!/usr/bin/env bash
LC_ALL=C

# this is inspired by and deeply pulled from deb-get (https://github.com/wimpysworld/deb-get) by Martin Wimpress

readonly VERSION="0.0.3"

function usage() {
cat <<HELP

Usage

cmk-get {update | upgrade | show pkg | install pkg | remove pkg  | cache 
        | clean | list | fancy | comma | help | version}

cmk-get provides a high-level commandline interface to easily install and update packages
published in 3rd party github/gitlab releases, or other sites via direct download.

update
    update is used to resynchronize the app index files from their sources.

upgrade
    upgrade is used to install the newest versions of all apps currently installed on the system.

install
    install is followed by one app desired for installation or upgrading.

remove
    remove is identical to install except apps are removed instead of installed.

clean
    clean clears out the local repository (/var/cache/cmk-get) of retrieved app files.

show
    show is followed by one app and shows information about the given app including its install source and update mechanism.

list
    list the apps available via cmk-get.

fancy
    markdown formatted list of apps available via cmk-get.

comma
    CSV formatted list of apps available via cmk-get.

cache
    list the contents of the cmk-get cache (/var/cache/cmk-get)

help
    shows this help

version
    show cmk-get version
HELP
}

###############################################################################
## helper functions
###############################################################################
function messenger() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        return
    fi

    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local BLUE="\e[34m"
    local MAGENTA="\e[35m"
    local CYAN="\e[36m"
    local RESET="\e[0m"
    local MTYPE="${1}"
    local MSG="${2}"

    case ${MTYPE} in
        info) echo -e " [${BLUE}+${RESET}] ${CYAN}${MSG}${RESET}";;
        progress) echo -en " [${GREEN}+${RESET}] ${CYAN}${MSG}${RESET}";;
        recommend) echo -e " [${MAGENTA}!${RESET}] ${MAGENTA}${MSG}${RESET}";;
        warn) echo -e " [${YELLOW}*${RESET}] ${YELLOW}WARNING! ${MSG}${RESET}";;
        error) echo -e " [${RED}!${RESET}] ${RED}ERROR! ${MSG}${RESET}";;
        fatal) echo -e " [${RED}!${RESET}] ${RED}ERROR! ${MSG}${RESET}"
                exit 1;;
        *) echo -e " [?] UNKNOWN: ${MSG}";;
    esac
}

function is_installed() {
    if [ -f "${CACHE}/installed_${1}" ]; then
        return 0;
    else
        return 1;
    fi
}

function list_apps() {
    local PAD='                              '
    local STATUS="installed"
    for APP in "${APPS[@]}"; do
        if is_installed "${APP}"; then
            printf "%s %s [ ${STATUS} ]\n" "${APP}" "${PAD:${#APP}}"
        else
            echo "${APP}"
        fi
    done
}

function elevate_privs() {
    if [ "$(id -ru) -eq 0" ]; then
        EV=""
    elif command -v sudo 1>/dev/null; then
        EV="sudo"
    else
        fancy_message fatal "$(basename ${0}) requires sudo to elevate permissions, sudo was found."
    fi 

    # Authenticate root context
    if [ -n "${EV}" ]; then
        ${EV} true
    fi
}
# function get_cache_file() {
    
# }

###############################################################################
## end of helper functions
###############################################################################

###############################################################################
## application functions
###############################################################################
function app_bw-cli() {
    PRETTYNAME="Bitwarden CLI"
}

function app_btop() {
    PRETTYNAME="btop++"
}

function app_g910-keys() {
    PRETTYNAME="Logitech G910 Key Mapper"
}

function app_sweet-dark-theme() {
    PRETTYNAME="Sweet Dark Theme by Elivira"
}

function app_candy-icons() {
    PRETTYNAME="Candy Icons by Elivira"
}

function app_sweet-folder() {
    PRETTYNAME="Sweet Purple Folders by Elivira"
}

function app_nerd-fonts () {
    PRETTYNAME="Nerd Fonts"
}
###############################################################################
## end of application functions
###############################################################################

###############################################################################
## main application
###############################################################################
readonly APPS=($(declare -F | grep app_ | sed 's|declare -f app_||g' | sort))
readonly CACHE="/var/cache/cmk-get"

if [ ! -d "${CACHE}" ]; then
    elevate_privs
    ${EP} mkdir -p "${CACHE}" 2>/dev/null
    ${EP} chmod 755 "${CACHE}" 2>/dev/null
fi

if [ -n "${1}" ]; then
    ACTION="${1,,}"
    shift
else
    messenger error "You must specify an action."
    usage
    exit 1
fi

case ${ACTION} in
    install|remove|show)
        if [ -z "${1}" ]; then
            messenger error "You must specify an app:\n"
            list_apps
            exit 1
        fi
esac

export EP=""

case "${ACTION}" in
    cache)
        TEMP=$(lsd -lh ${CACHE})
        if [ -z "${TEMP}" ]; then
            echo "The cache exists, but is currently empty (nothing has been installed)."
        else
            lsd -lh ${CACHE}
        fi;;
    clean)
        echo "not yet implemented...";;
    comma)
        echo "not yet implemented...";;
    fancy)
        echo "not yet implemented...";;
    help)
        echo "not yet implemented...";;
    install)
        echo "not yet implemented...";;
    list)
        echo "not yet implemented...";;
    remove)
        echo "not yet implemented...";;
    show)
        echo "not yet implemented...";;
    update)
        echo "not yet implemented...";;
    upgrade)
        echo "not yet implemented...";;
    version)
        echo "not yet implemented...";;
    *)  messenger fatal "Unknown action supplied: ${ACTION}";;
esac
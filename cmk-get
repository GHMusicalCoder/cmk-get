#!/usr/bin/env bash
LC_ALL=C

# this is inspired by and deeply pulled from deb-get (https://github.com/wimpysworld/deb-get) by Martin Wimpress

readonly VERSION="0.0.13"

function usage() {
cat <<HELP

Usage

cmk-get {update | upgrade | show pkg | install pkg | remove pkg  | cache 
        | clean | list | fancy | comma | help | version}

cmk-get provides a high-level commandline interface to easily install and update packages
published in 3rd party github/gitlab releases, or other sites via direct download.

update
    update is used to resynchronize the app index files from their sources.

upgrade
    upgrade is used to install the newest versions of all apps currently installed on the system.

install
    install is followed by one app desired for installation or upgrading.

remove
    remove is identical to install except apps are removed instead of installed.

clean
    clean clears out the local repository (/var/cache/cmk-get) of retrieved app files.

show
    show is followed by one app and shows information about the given app including its install source and update mechanism.

list
    list the apps available via cmk-get.

fancy
    markdown formatted list of apps available via cmk-get.

comma
    CSV formatted list of apps available via cmk-get.

cache
    list the contents of the cmk-get cache (/var/cache/cmk-get)

help
    shows this help

version
    show cmk-get version
HELP
}

###############################################################################
## helper functions
###############################################################################
function messenger() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        return
    fi

    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local BLUE="\e[34m"
    local MAGENTA="\e[35m"
    local CYAN="\e[36m"
    local RESET="\e[0m"
    local MTYPE="${1}"
    local MSG="${2}"

    case ${MTYPE} in
        info) echo -e " [${BLUE}+${RESET}] ${CYAN}${MSG}${RESET}";;
        progress) echo -e " [${GREEN}+${RESET}] ${CYAN}${MSG}${RESET}";;
        recommend) echo -e " [${MAGENTA}!${RESET}] ${MAGENTA}${MSG}${RESET}";;
        warn) echo -e " [${YELLOW}*${RESET}] ${YELLOW}WARNING! ${MSG}${RESET}";;
        error) echo -e " [${RED}!${RESET}] ${RED}ERROR! ${MSG}${RESET}";;
        fatal) echo -e " [${RED}!${RESET}] ${RED}ERROR! ${MSG}${RESET}"
                exit 1;;
        *) echo -e " [?] UNKNOWN: ${MSG}";;
    esac
}

function is_installed() {
    if [ -f "${CACHE}/installed_${1}"* ]; then
        return 0;
    else
        return 1;
    fi
}

function list_apps() {
    local PAD='                              '
    local STATUS="installed"
    for APP in "${APPS[@]}"; do
        if is_installed "${APP}"; then
            printf "%s %s [ ${STATUS} ]\n" "${APP}" "${PAD:${#APP}}"
        else
            echo "${APP}"
        fi
    done
}

function elevate_privs() {
    if [ "$(id -ru)" -eq 0 ]; then
        EP=""
    elif command -v sudo 1>/dev/null; then
        EP="sudo"
    else
        fancy_message fatal "$(basename ${0}) requires sudo to elevate permissions, sudo was found."
    fi 

    # Authenticate root context
    if [ -n "${EP}" ]; then
        ${EP} true
    fi
}

function validator() {
    export APP="${1}"

    if [[ ! " ${APPS[*]} " =~ " ${APP} " ]]; then
        messenger error "${APP} is not a supported application."
        list_apps
        exit 1
    fi

    export APPVERSION=""
    export FINAL_LOCATION=""
    export MAKE_PREFIX=""
    export METHOD=""
    export PRETTYNAME=""
    export REPO_NAME=""
    export REPO_URL=""
    export SUMMARY=""
    export UNZIP_NAME=""
    export URL=""
    export WEBSITE=""
    export ZIPFILE=""

    # Source the variables
    app_${APP} 2>/dev/null
}

function applist_csv() {
    echo "\"App Ref\",\"Application Name\",\"App Version\",\"Install Type\",\"Application Summary\""
    for APP in "${APPS[@]}"; do
        validator "${APP}"
        echo "\"${APP}\",\"${PRETTYNAME}\",\"${APPVERSION}\",\"${METHOD}\",\"${SUMMARY}\""
    done
   
}

function set_appversion() {
    if is_installed "${APP}"; then
        APPVERSION=$(grep "tag_name.*" "${CACHE}/${APP}.json" | cut -d'"' -f4 | cut --complement -c 1)
    else
        APPVERSION="Not Installed"
    fi
}

function applist_md() {
    local ICON=""
    echo "| Source   | Install Name   | Application Name   | Description   |"
    echo "| :------: | :------------: | :----------------: | :-----------: |"
    for APP in "${APPS[@]}"; do
        validator "${APP}"
        case ${METHOD} in
            zip)    ICON="icon-zipper.svg";;
            repo)   ICON="icon-github.svg";;
            make)   ICON="icon-trowel.svg";;
            *)      ICON="icon-linux.svg";;
        esac
        echo "| [<img src=\".icons/${ICON}\" align=\"top\" width=\"20\" style=\"background-color:white;padding:20px;\" />](${WEBSITE}) | "'`'"${APP}"'`'" | <b>${PRETTYNAME}</b> | <i>${SUMMARY}</i> |"
    done
}

function show_appinfo() {
    echo "not yet implemented"
}

function get_release_info() {
    # do not process releases while generating lists
    if [ "${ACTION}" == "install" ] || [ "${ACTION}" == "update" ]; then
        messenger progress "Updating ${CACHE}/${APP}.json"
        if [ ! -e "${CACHE}/${APP}.json" ] || test "$(find "${CACHE}/${APP}.json" -mmin +60)"; then
            if ! ${EP} wget -q "${1}" -O "${CACHE}/${APP}.json"; then
                messenger warn "Updating ${CACHE}/${APP}.json failed.  Deleting it."
                ${EP} rm "${CACHE}/{$APP}.json" 2>/dev/null
            fi
            if [ -f "${CACHE}/${APP}.json" ] && grep "API rate limit exceeded" "${CACHE}/${APP}.json"; then
                messenger warn "Updating ${CACHE}/${APP}.json exceed GitHub API limits. Deleting it."
                ${EP} rm "${CACHE}/${APP}.json" 2>/dev/null
            fi
        fi
    fi

}

function download_file() {
    if [ ! -f "${CACHE}/${ZIPFILE}" ]; then
        if ! ${EP} wget --quiet --continue --show-progress --progress=bar:force:noscroll "${URL}" -O "${CACHE}/${ZIPFILE}"; then
            messenger error "Failed to download ${ZIPFILE}.  Deleting ${CACHE}/${ZIPFILE}"
            ${EP} rm "${CACHE}/${ZIPFILE}" 2>/dev/null
        fi
    fi
}

function install_zip() {
    download_file
    ${EP} unzip -qq "${CACHE}/${ZIPFILE}" -d "${CACHE}/${APP}"
    cp "${CACHE}/${APP}/${UNZIP_NAME}" "${FINAL_LOCATION}/"
    chmod 755 "${FINAL_LOCATION}/${UNZIP_NAME}"

    # create the install record for the zip
    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function install_make() {
    download_file
    ${EP} mkdir -p "${CACHE}/${APP}"
    ${EP} tar -xjf "${CACHE}/${ZIPFILE}" -C "${CACHE}/${APP}"
    cd "${CACHE}/${APP}"
    make install ${MAKE_PREFIX} 2>/dev/null

    # create the install record for the zip
    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function install_repo() {
    # pull down repo
    local GIT_CMD=""
    if [ ${FINAL_LOCATION:0:5} == "/home" ]; then
        GIT_CMD="git clone"
    else
        GIT_CMD="${EP} git clone"
    fi
    ${GIT_CMD} "${REPO_URL}" ${FINAL_LOCATION}

}

###############################################################################
## end of helper functions
###############################################################################

###############################################################################
## application functions
###############################################################################
function app_bw-cli() {
    METHOD="zip"
    get_release_info "https://api.github.com/repos/bitwarden/cli/releases/latest"
    set_appversion
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*.zip" "${CACHE}/${APP}.json" | head -n1 | cut -d'"' -f4)
        ZIPFILE="${URL##*/}"
        UNZIP_NAME="bw"
        FINAL_LOCATION="$HOME/.local/bin"
    fi
    PRETTYNAME="Bitwarden CLI"
    WEBSITE="https://www.bitwarden.com"
    SUMMARY="A command line version of the Bitwarden Password Manager client."
}

function app_btop() {
    METHOD="make"
    get_release_info "https://api.github.com/repos/aristocratos/btop/releases/latest"
    set_appversion
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*-x86_64-linux-musl.tbz" "${CACHE}/${APP}.json" | head -n1 | cut -d'"' -f4)
        ZIPFILE="${URL##*/}"
        MAKE_PREFIX="PREFIX=$HOME/.local"
    fi    
    PRETTYNAME="btop++"
    WEBSITE="https://github.com/aristocratos/btop"
    SUMMARY="Resource monitor that shows usage and stats for processor, memory, disks, network and processes.  Written in C++"
}

function app_g910-keys() {
    # this is pulling from my personal fork (which is unchanged from the below website)
    REPO_NAME="g910-gkey-macro-support"
    REPO_URL="https://github.com/GHMusicalCoder/${REPO_NAME}.git"
    FINAL_LOCATION="$HOME/Applications/GitApps"
    PRETTYNAME="Logitech G910 Key Mapper"
    METHOD="repo"
    WEBSITE="https://github.com/JSubelj/g910-gkey-macro-support"
    SUMMARY="Linux keyboard mapper for Logitech G910 G-Keys."
}

function app_sweet-dark-theme() {
    METHOD="zip"

    PRETTYNAME="Sweet Dark Theme by Elivira"
}

function app_candy-icons() {
    METHOD="zip"
    PRETTYNAME="Candy Icons by Elivira"
}

function app_sweet-folder() {
    METHOD="zip"
    PRETTYNAME="Sweet Purple Folders by Elivira"
}

function app_nerd-fonts () {
    METHOD="zip"
    PRETTYNAME="Nerd Fonts"
}
###############################################################################
## end of application functions
###############################################################################

###############################################################################
## main application
###############################################################################
readonly APPS=($(declare -F | grep app_ | sed 's|declare -f app_||g' | sort))
readonly CACHE="/var/cache/cmk-get"

if [ ! -d "${CACHE}" ]; then
    elevate_privs
    ${EP} mkdir -p "${CACHE}" 2>/dev/null
    ${EP} chmod 755 "${CACHE}" 2>/dev/null
fi

if [ -n "${1}" ]; then
    ACTION="${1,,}"
    shift
else
    messenger error "You must specify an action."
    usage
    exit 1
fi

case ${ACTION} in
    install|remove|show)
        if [ -z "${1}" ]; then
            messenger error "You must specify an app:\n"
            list_apps
            exit 1
        fi
esac

export EP=""

case "${ACTION}" in
    cache)
        TEMP=$(lsd -lh ${CACHE})
        if [ -z "${TEMP}" ]; then
            echo "The cache ${CACHE} exists, but is currently empty (nothing has been installed)."
        else
            lsd -lh ${CACHE}
        fi;;
    clean)
        elevate_privs
        ${EP} rm -v "${CACHE}/*";;
    comma)
        ACTION="prettylist"
        applist_csv;;
    fancy)
        ACTION="prettylist"
        applist_md;;
    help)   usage;;
    install)
        elevate_privs
        validator "${1}"
        case ${METHOD} in
            make) install_make;;
            repo) install_repo;;
            zip) install_zip;;
        esac;;
    list)
        list_apps;;
    remove)
        echo "not yet implemented...";;
    show)
        validator "${1}"
        show_appinfo;;
    update)
        echo "not yet implemented...";;
    upgrade)
        echo "not yet implemented...";;
    version)    echo "$(basename ${0}) current verion: ${VERSION}";;
    *)  messenger fatal "Unknown action supplied: ${ACTION}";;
esac
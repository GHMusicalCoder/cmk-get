#!/usr/bin/env bash
LC_ALL=C

# this is inspired by and deeply pulled from deb-get (https://github.com/wimpysworld/deb-get) by Martin Wimpress

readonly VERSION="0.7.9"

function usage() {
cat <<HELP

Usage

cmk-get {update | upgrade | show pkg | install pkg | remove pkg  | cache 
        | clean | list | fancy | comma | help | version}

cmk-get provides a high-level commandline interface to easily install and update packages
published in 3rd party github/gitlab releases, or other sites via direct download.

update
    update checks installed cmk-get apps for newer versions (all installed apps).

upgrade
    upgrade will update any cmk-get apps that have newer versions (all installed apps with updates).

install
    install is followed by one app desired for installation or upgrading.

remove
    remove is identical to install except apps are removed instead of installed.

clean
    clean clears out the local repository (/var/cache/cmk-get) of retrieved app files.

show
    show is followed by one app and shows information about the given app including its install source and update mechanism.

list
    list the apps available via cmk-get.

fancy
    markdown formatted list of apps available via cmk-get.

comma
    CSV formatted list of apps available via cmk-get.

cache
    list the contents of the cmk-get cache (/var/cache/cmk-get)

help
    shows this help

version
    show cmk-get version
HELP
}

###############################################################################
## helper functions
###############################################################################
function messenger() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        return
    fi

    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local BLUE="\e[34m"
    local MAGENTA="\e[35m"
    local CYAN="\e[36m"
    local RESET="\e[0m"
    local MTYPE="${1}"
    local MSG="${2}"

    case ${MTYPE} in
        info) echo -e " [${BLUE}+${RESET}] ${CYAN}${MSG}${RESET}";;
        progress) echo -e " [${GREEN}+${RESET}] ${CYAN}${MSG}${RESET}";;
        recommend) echo -e " [${MAGENTA}!${RESET}] ${MAGENTA}${MSG}${RESET}";;
        match) echo -e " [${MAGENTA}!${RESET}] ${MAGENTA}${MSG}${RESET}"
                exit 1;;
        warn) echo -e " [${YELLOW}*${RESET}] ${YELLOW}WARNING! ${MSG}${RESET}";;
        error) echo -e " [${RED}!${RESET}] ${RED}ERROR! ${MSG}${RESET}";;
        fatal) echo -e " [${RED}!${RESET}] ${RED}ERROR! ${MSG}${RESET}"
                exit 1;;
        *) echo -e " [?] UNKNOWN: ${MSG}";;
    esac
}

function is_installed() {
    if test -f "${CACHE}/installed_${1}_"*; then
        return 0;
    else
        return 1;
    fi
}

function set_installed_version() {
    if test -f "${CACHE}/installed_${1}_"*; then
        INSTALLED_VER=$(ls "$CACHE/installed_${1}_"* | cut -d "_" -f3)
    else
        INSTALLED_VER=""
    fi
}

function list_apps() {
    local PAD='                              '
    for APP in "${APPS[@]}"; do
        if is_installed "${APP}"; then
            set_installed_version ${APP}
            local STATUS="${INSTALLED_VER} Installed"
            printf "%s %s [ ${STATUS} ]\n" "${APP}" "${PAD:${#APP}}"
        else
            echo "${APP}"
        fi
    done
}

function elevate_privs() {
    if [ "$(id -ru)" -eq 0 ]; then
        EP=""
    elif command -v sudo 1>/dev/null; then
        EP="sudo"
    else
        fancy_message fatal "$(basename ${0}) requires sudo to elevate permissions, sudo was found."
    fi 

    # Authenticate root context
    if [ -n "${EP}" ]; then
        ${EP} true
    fi
}

function validator() {
    export APP="${1}"

    if [[ ! " ${APPS[*]} " =~ " ${APP} " ]]; then
        messenger error "${APP} is not a supported application."
        list_apps
        exit 1
    fi

    export APPVERSION=""
    export BASE=""
    export CURL_ADDRESS=""
    export FINAL_LOCATION=""
    export INSTALLED_VER=""
    export LAST_UPDATE=""
    export MAKE_PREFIX=""
    export METHOD=""
    export PRETTYNAME=""
    export REPO_NAME=""
    export REPO_URL=""
    export SUMMARY=""
    export TEMP_LOC=""
    export UNDEC_URL=""
    export UNZIP_NAME=""
    export URL=""
    export WEBSITE=""
    export ZIPFILE=""

    # Source the variables
    app_${APP} "${NO_OUTPUT}"
    set_installed_version ${APP}
    case ${ACTION} in
        install|update|upgrade)
            if [[ ${APPVERSION} == ${INSTALLED_VER} ]]; then
                if [[ ${APPVERSION} == "" ]]; then
                    messenger fatal "APPVERSION variable failed to get set."
                fi
                messenger match "Current version of ${APP} already installed."
            fi;;
    esac;
}

function no_output() {
    "$@" 1>/dev/null 2>&1;
}

function applist_csv() {
    echo "\"App Ref\",\"Application Name\",\"App Version\",\"Install Type\",\"Application Summary\""
    for APP in "${APPS[@]}"; do
        validator "${APP}"
        echo "\"${APP}\",\"${PRETTYNAME}\",\"${APPVERSION}\",\"${METHOD}\",\"${SUMMARY}\""
    done
   
}

function set_appversion() {
    if [[ ${METHOD} == "repo" ]]; then
        # pull appversion from readme.md file
        APPVERSION="$(curl -s "${CURL_ADDRESS}" | grep -m3 "<strong>" | tail -n 1 | cut -d'>' -f2 | cut -d'<' -f1)"
    elif [[ ${METHOD} == "tar" ]]; then
        APPVERSION=$(echo "${LAST_UPDATE}" | sed 's/-//g')
    else
        if [ -e "${CACHE}/${APP}.json" ]; then
            APPVERSION=$(grep "tag_name.*" "${CACHE}/${APP}.json" | cut -d'"' -f4 | cut --complement -c 1)
        else
            APPVERSION="Not Installed"
        fi
    fi
}

function applist_md() {
    local ICON=""
    echo "| Source   | Install Name   | Application Name   | Description   |"
    echo "| :------: | :------------: | :----------------: | :-----------: |"
    for APP in "${APPS[@]}"; do
        validator "${APP}"
        case ${METHOD} in
            zip)    ICON="icon-zipper.svg";;
            repo)   ICON="icon-github.svg";;
            make)   ICON="icon-trowel.svg";;
            *)      ICON="icon-linux.svg";;
        esac
        echo "| [<img src=\".icons/${ICON}\" align=\"top\" width=\"20\" style=\"background-color:white;padding:20px;\" />](${WEBSITE}) | "'`'"${APP}"'`'" | <b>${PRETTYNAME}</b> | <i>${SUMMARY}</i> |"
    done
}

function show_appinfo() {
    echo "not yet implemented"
}

function get_release_info() {
    # do not process releases while generating lists
    if [ "${ACTION}" == "install" ] || [ "${ACTION}" == "update" ]; then
        if [ ! -e "${CACHE}/${APP}.json" ] || test "$(find "${CACHE}/${APP}.json" -mmin +60)"; then
            messenger progress "Updating ${CACHE}/${APP}.json"
            if ! ${EP} wget -q --no-use-server-timestamp "${1}" -O "${CACHE}/${APP}.json"; then
                messenger warn "Updating ${CACHE}/${APP}.json failed.  Deleting it."
                ${EP} rm "${CACHE}/{$APP}.json" "${NO_OUTPUT}"
            fi
            if [ -f "${CACHE}/${APP}.json" ] && grep "API rate limit exceeded" "${CACHE}/${APP}.json"; then
                messenger warn "Updating ${CACHE}/${APP}.json exceed GitHub API limits. Deleting it."
                ${EP} rm "${CACHE}/${APP}.json" "${NO_OUTPUT}"
            fi
        fi
    fi

}

function download_file() {
    if [ ! -f "${CACHE}/${ZIPFILE}" ]; then
        if ! ${EP} wget --quiet --continue --show-progress --progress=bar:force:noscroll "${URL}" -O "${CACHE}/${ZIPFILE}"; then
            messenger error "Failed to download ${ZIPFILE}.  Deleting ${CACHE}/${ZIPFILE}"
            ${EP} rm "${CACHE}/${ZIPFILE}" "${NO_OUTPUT}"
        fi
    fi
}

function make_final_location() {
    if [ ${FINAL_LOCATION:0:5} == "/home" ]; then
        messenger info "Creating ${FINAL_LOCATION}"
        mkdir -p "${FINAL_LOCATION}"
    else 
        messenger info "Creating ${FINAL_LOCATION} with privlidge"
        ${EP} mkdir -p "${FINAL_LOCATION}"
    fi    
}

function make_temp_location() {
    messenger info "Creating ${TEMP_LOC} with privlidge"
    ${EP} mkdir -p "${TEMP_LOC}"
}

function set_gnome_theme() {
    gsettings set org.gnome.desktop.interface gtk-theme "${1}"
    gsettings set org.gnome.desktop.wm.preferences theme "${1}"
}

function install_zip() {
    # if final location doesn't exist - create it
    if [ ! -d "${FINAL_LOCATION}" ]; then
        make_final_location
    fi

    messenger progress "Installing ${APP}..."
    download_file
    local INSTALLED_LOC=""
    if [ -z "${TEMP_LOC}" ]; then
        INSTALLED_LOC="${FINAL_LOCATION}"
    else
        INSTALLED_LOC="${TEMP_LOC}"
    fi

    ${EP} unzip -qq "${CACHE}/${ZIPFILE}" -d "${INSTALLED_LOC}"

    # create the install record for the zip
    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function install_tar() {
    if [ ! -d "${FINAL_LOCATION}" ]; then
        make_final_location
    fi

    messenger progress "Installing ${APP}..."
    download_file
    local INSTALLED_LOC=""
    if [ -z "${TEMP_LOC}" ]; then
        INSTALLED_LOC="${FINAL_LOCATION}"
    else
        INSTALLED_LOC="${TEMP_LOC}"
    fi

    ${EP} tar -xf "${CACHE}/${ZIPFILE}" -C "${INSTALLED_LOC}"

    # create the install record for the tarball
    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function install_tz() {
    if [ ! -d "${FINAL_LOCATION}" ]; then
        make_final_location
    fi

    if [ ! -d "${TEMP_LOC}" ]; then
        make_temp_location
    fi

    messenger progress "Installing ${APP}..."
    download_file
    local INSTALLED_LOC=""
    if [ -z "${TEMP_LOC}" ]; then
        INSTALLED_LOC="${FINAL_LOCATION}"
    else
        INSTALLED_LOC="${TEMP_LOC}"
    fi

    ${EP} tar -xf "${CACHE}/${ZIPFILE}" -C "${INSTALLED_LOC}"

    # create the install record for the tarball
    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function install_make() {
    messenger progress "Installing ${APP}..."
    download_file
    ${EP} mkdir -p "${CACHE}/${APP}"
    ${EP} tar -xjf "${CACHE}/${ZIPFILE}" -C "${CACHE}/${APP}"
    cd "${CACHE}/${APP}"
    no_output make install ${MAKE_PREFIX} 

    # create the install record for the zip
    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function install_repo() {
    messenger progress "Installing ${APP}..."
    # pull down repo
    no_output git clone "${REPO_URL}" "${HOME_REPO}/${REPO_NAME}" 

    ${EP} touch "${CACHE}/installed_${APP}_${APPVERSION}"
}

function followup_g910-gkeys() {
    local DIR="${HOME_REPO}/${REPO_NAME}"
    local CMD=""
    if [ ${HOME_REPO:0:5} == "/home" ]; then
        CMD="chmod"
    else
        CMD="${EP} chmod"
    fi
    modprobe uinput
    cd "${DIR}"
    ${CMD} +x "${DIR}/installer.sh"
    no_output ${EP} ./installer.sh 
    no_output ${EP} systemctl enable --now g910-gkeys 
}

function followup_sweet-dark() {
    set_gnome_theme "Sweet-Dark"
}

function followup_bw-cli() {
    ${EP} chown $USER:$USER "${FINAL_LOCATION}/${UNZIP_NAME}"
    ${EP} chmod 755 "${FINAL_LOCATION}/${UNZIP_NAME}"
}

function followup_btop() {
    echo ""
}

function followup_candy-icons() {
    gsettings set org.gnome.desktop.interface icon-theme ${1}
}

function followup_sweet-folder() {
    local FOLDER="Sweet-Purple"
    cp "${HOME_REPO}/${REPO_NAME}/${FOLDER}" "${FINAL_LOCATION}/${FOLDER}"
    sed -i 's/^Inherits=.*/Inherits=candy-icons,breeze-dark,gnome,ubuntu-mono-dark,Mint-X,elementary,gnome,hicolor' \
        "${FINAL_LOCATION}/${FOLDER}/index.theme"
}

function followup_hack-font() {
    no_output ${EP} mv "${TEMP_LOC}"/*Font\ Complete.ttf "${FINAL_LOCATION}" 
    no_output ${EP} mv "${TEMP_LOC}"/*Font\ Complete\ Mono.ttf "${FINAL_LOCATION}"
    no_output ${EP} fc-cache -fv
}

function followup_shellcheck() {
    no_output ${EP} mv "${TEMP_LOC}"/${UNZIP_NAME}/${APP} "${FINAL_LOCATION}"
    ${EP} chown $USER:$USER "${FINAL_LOCATION}/${APP}"
    ${EP} chmod 755 "${FINAL_LOCATION}/${APP}"
}

function remove_cache_info() {
    if [ "${METHOD}" != "repo" ]; then
        if [ -n ${TEMP_LOC} ]; then
            ${EP} rm -rf "${CACHE}/${APP}"
        fi

        ${EP} rm -rf "${CACHE}/${ZIPFILE}"
        ${EP} rm -rf "${CACHE}/${APP}.json"
    fi
    ${EP} rm -rf "${CACHE}/installed_${APP}_"*
}

function remove_app() {
    if is_installed ${1}; then
        messenger progress "Removing ${1} from system..."
        validator ${1}
        remove_${1} ${1}
    else
        messenger fatal "${1} is not installed..."
    fi
}

function remove_bw-cli() {   
    rm -rf "${FINAL_LOCATION}/${UNZIP_NAME}"
    remove_cache_info
}

function remove_btop() {
    cd "${CACHE}/${APP}"
    no_output make uninstall ${MAKE_PREFIX} 
    remove_cache_info
}

function remove_g910-gkeys() {
    no_output ${EP} systemctl disable --now ${1} 
    ${EP} rm -rf /etc/${1}
    ${EP} rm -rf ${HOME_REPO}/${REPO_NAME}
    remove_cache_info
}

function remove_sweet-dark() {
    set_gnome_theme "Yaru-MATE-dark"
    ${EP} rm -rf "${FINAL_LOCATION}"/Sweet-Dark
    remove_cache_info
}

function remove_hack-font() {
    no_output ${EP} rm "${TEMP_LOC}"/*Font\ Complete.ttf
    no_output ${EP} rm "${TEMP_LOC}"/*Font\ Complete\ Mono.ttf
    no_output ${EP} fc-cache -fv 
    remove_cache_info
}

function remove_shellcheck() {   
    rm -rf "${FINAL_LOCATION}/${APP}"
    remove_cache_info
}


###############################################################################
## end of helper functions
###############################################################################

###############################################################################
## application functions
###############################################################################
function app_bw-cli() {
    METHOD="zip"
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "https://api.github.com/repos/bitwarden/cli/releases/latest"
        URL=$(grep "browser_download_url.*.zip" "${CACHE}/${APP}.json" | head -n1 | cut -d'"' -f4)
        ZIPFILE="${URL##*/}"
        UNZIP_NAME="bw"
        FINAL_LOCATION="$HOME/.local/bin"
        set_appversion
    fi
    PRETTYNAME="Bitwarden CLI"
    WEBSITE="https://www.bitwarden.com"
    SUMMARY="A command line version of the Bitwarden Password Manager client."
}

function app_btop() {
    METHOD="make"
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "https://api.github.com/repos/aristocratos/btop/releases/latest"
        URL=$(grep "browser_download_url.*-x86_64-linux-musl.tbz" "${CACHE}/${APP}.json" | head -n1 | cut -d'"' -f4)
        ZIPFILE="${URL##*/}"
        MAKE_PREFIX="PREFIX=$HOME/.local"
        set_appversion
    fi    
    PRETTYNAME="btop++"
    WEBSITE="https://github.com/aristocratos/btop"
    SUMMARY="Resource monitor that shows usage and stats for processor, memory, disks, network and processes.  Written in C++"
}

function app_g910-gkeys() {
    METHOD="repo"
    # this is pulling from my personal fork (which is unchanged from the below website)
    REPO_NAME="g910-gkey-macro-support"
    if [ "${ACTION}" != "prettylist" ]; then
        REPO_URL="https://github.com/GHMusicalCoder/${REPO_NAME}.git"
        CURL_ADDRESS="https://github.com/JSubelj/${REPO_NAME}"
        set_appversion
    fi
    PRETTYNAME="Logitech G910 Key Mapper"
    WEBSITE="https://github.com/JSubelj/${REPO_NAME}"
    SUMMARY="Linux keyboard mapper for Logitech G910 G-Keys."
}

function app_sweet-dark() {
    METHOD="tar"
    WEBSITE="https://www.gnome-look.org/p/1253385/" 
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "${WEBSITE}/loadFiles"
        BASE=$(jq '.files | . |= map(select(.active == "1" and .name == "Sweet-Dark.tar.xz") | {name, updated_timestamp, url})' "${CACHE}/${APP}.json")
        UNDEC_URL=$(echo "${BASE}" | cut -d"," -f3 | cut -d":" -f2 | tr -d "[]" | tr -d "{}" | cut -d'"' -f2 | xargs)
        LAST_UPDATE=$(echo "${BASE}" | cut -d'"' -f 4 | tr -d "[]" | tr -d "{}" | head -n4 | tail -n1 | cut -d" " -f 1)
        URL=$(python3 -c 'import sys, urllib.parse; print(urllib.parse.unquote(sys.argv[1]))' "${UNDEC_URL}")
        ZIPFILE="${URL##*/}"
        FINAL_LOCATION="$HOME/.themes"
        set_appversion
    fi
    PRETTYNAME="Sweet Dark Theme"          
    COPY_LOCATTION="$HOME/.themes"
}

function app_candy-icons() {
    METHOD="tar"
    WEBSITE="https://www.opendesktop.org/p/1305251/"
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "${WEBSITE}/loadFiles"
        BASE=$(jq '.files | . |= map(select(.active == "1" and .name == "candy-icons.tar.xz") | {name, updated_timestamp, url})' "${CACHE}/${APP}.json")
        UNDEC_URL=$(echo "${BASE}" | cut -d"," -f3 | cut -d":" -f2 | tr -d "[]" | tr -d "{}" | cut -d'"' -f2 | xargs)
        LAST_UPDATE=$(echo "${BASE}" | cut -d'"' -f 4 | tr -d "[]" | tr -d "{}" | head -n4 | tail -n1 | cut -d" " -f 1)
        URL=$(python3 -c 'import sys, urllib.parse; print(urllib.parse.unquote(sys.argv[1]))' "${UNDEC_URL}")
        ZIPFILE="${URL##*/}"
        FINAL_LOCATION="$HOME/.icons"
        set_appversion
    fi
    PRETTYNAME="Candy Icons"   
    SUMMARY="A Candy neon-istic icon theme."
}

function app_sweet-folder() {
    METHOD="tar"
    WEBSITE="https://www.opendesktop.org/p/1284047"
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "${WEBSITE}/loadFiles"
        BASE=$(jq '.files | . |= map(select(.active == "1" and .name == "Sweet-Purple.tar.xz") | {name, updated_timestamp, url})' "${CACHE}/${APP}.json")
        UNDEC_URL=$(echo "${BASE}" | cut -d"," -f3 | cut -d":" -f2 | tr -d "[]" | tr -d "{}" | cut -d'"' -f2 | xargs)
        LAST_UPDATE=$(echo "${BASE}" | cut -d'"' -f 4 | tr -d "[]" | tr -d "{}" | head -n4 | tail -n1 | cut -d" " -f 1)
        URL=$(python3 -c 'import sys, urllib.parse; print(urllib.parse.unquote(sys.argv[1]))' "${UNDEC_URL}")
        ZIPFILE="${URL##*/}"
        FINAL_LOCATION="$HOME/.icons"
        set_appversion
    fi
    PRETTYNAME="Sweet Folders - Purple"   
    SUMMARY="Folder icons for the Sweet GTK theme."
}

function app_hack-font () {
    METHOD="zip"
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest"
        URL=$(grep "browser_download_url.*Hack.zip" "${CACHE}/${APP}.json" | head -n1 | cut -d'"' -f4)
        ZIPFILE="${URL##*/}"
        TEMP_LOC="${CACHE}/${APP}"
        FINAL_LOCATION="$HOME/.fonts"
        set_appversion
    fi
    PRETTYNAME="Hack Font"
    WEBSITE="https://www.nerdfonts.com/#home"
}

function app_shellcheck () {
    METHOD="tz"
    if [ "${ACTION}" != "prettylist" ]; then
        get_release_info "https://api.github.com/repos/koalaman/shellcheck/releases/latest"
        URL=$(grep "browser_download_url.*.linux.x86_64.tar.xz" "${CACHE}/${APP}.json" | head -n1 | cut -d'"' -f4)
        ZIPFILE="${URL##*/}"
        TEMP_LOC="${CACHE}/${APP}"
        FINAL_LOCATION="$HOME/.local/bin"
        set_appversion
        UNZIP_NAME="shellcheck-v${APPVERSION}"
    fi
    PRETTYNAME="ShellCheck"
    WEBSITE="https://www.shellcheck.net"
    SUMMARY="A command line version of the shellcheck.net's script linter"
}
###############################################################################
## end of application functions
###############################################################################

###############################################################################
## main application
###############################################################################
readonly APPS=($(declare -F | grep app_ | sed 's|declare -f app_||g' | sort))
readonly CACHE="/var/cache/cmk-get"
readonly HOME_REPO="$HOME/Applications/GitApps"
readonly ACTIVE_LIST="install remove update upgrade"

if [ ! -d "${CACHE}" ]; then
    elevate_privs
    ${EP} mkdir -p "${CACHE}" "${NO_OUTPUT}"
    ${EP} chmod 755 "${CACHE}" "${NO_OUTPUT}"

    # since we are in here - let's make sure our necessary programs are installed
    ${EP} apt install -y git wget curl make jq xz-utils"${NO_OUTPUT}"
fi

if [ -n "${1}" ]; then
    ACTION="${1,,}"
    shift
else
    messenger error "You must specify an action."
    usage
    exit 1
fi

case ${ACTION} in
    install|remove|show)
        if [ -z "${1}" ]; then
            messenger error "You must specify an app:\n"
            list_apps
            exit 1
        fi
esac

export EP=""

case "${ACTION}" in
    cache)
        TEMP=$(lsd -lh ${CACHE})
        if [ -z "${TEMP}" ]; then
            echo "The cache ${CACHE} exists, but is currently empty (nothing has been installed)."
        else
            lsd -lh ${CACHE}
        fi;;
    clean)
        elevate_privs
        ${EP} rm -v "${CACHE}/*";;
    comma)
        ACTION="prettylist"
        applist_csv;;
    fancy)
        ACTION="prettylist"
        applist_md;;
    help)   usage;;
    install)
        elevate_privs
        validator "${1}"
        case ${METHOD} in
            make) install_make;;
            repo) install_repo;;
            tar) install_tar;;
            tz) install_tz;;
            zip) install_zip;;
        esac
        followup_${APP};;
    list)
        list_apps;;
    remove)
        elevate_privs
        remove_app ${1};;
    show)
        validator "${1}"
        show_appinfo;;
    update)
        echo "not yet implemented...";;
        # go through all installed apps and note if there are any available updates
    upgrade)
        echo "not yet implemented...";;
        # go through all installed apps and if there are updates available - update the app
        # which is basically remove the old version and install the new one
    version)    echo "$(basename ${0}) current verion: ${VERSION}";;
    *)  messenger fatal "Unknown action supplied: ${ACTION}";;
esac